23 May

What is Ansible ?
Ansible is an open source IT automation engine that automates

	provisioning
	configuration management
	application deployment
	orchestration

	and many other IT processes. It is free to use, and the project benefits from the experience and intelligence of its thousands of contributors.

How Ansible works ?
Ansible is agentless in nature, which means you don't need install any software on the manage nodes.

For automating Linux and Windows, Ansible connects to managed nodes and pushes out small programs‚Äîcalled Ansible modules‚Äîto them. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules (over SSH by default), and removes them when finished. These modules are designed to be idempotent when possible, so that they only make changes to a system when necessary.

For automating network devices and other IT appliances where modules cannot be executed, Ansible runs on the control node. Since Ansible is agentless, it can still communicate with devices without requiring an application or service to be installed on the managed node.


üåü Ansible ‚Äî Core Concepts

| Concept         | Explanation                                                             |
| --------------- | ----------------------------------------------------------------------- |
| **Idempotency** | Running same playbook multiple times produces same result.              |
| **Playbook**    | YAML file containing automation logic.                                  |
| **Task**        | Single action in a playbook (e.g., install package).                    |
| **Inventory**   | List of managed hosts (IP, DNS names, groups).                          |
| **Modules**     | Pre-built functionality (e.g., `yum`, `copy`, `service`).               |
| **Roles**       | Way to organize playbooks into reusable components.                     |
| **Handlers**    | Triggered only when notified (e.g., restart service if config changed). |
| **Facts**       | Auto-collected data from hosts (OS version, IP, memory, etc).           |
| **Variables**   | Key-value data used in playbooks for flexibility.                       |
| **Templates**   | Jinja2 templating to generate config files dynamically.                 |
| **Vault**       | Encrypt sensitive data (passwords, secrets).                            |


üîß Common Ansible Workflow
1Ô∏è. Write Playbook ‚Üí Configure Inventory ‚Üí Run Playbook



‚úÖ What is Ansible? Why use it?
	Ansible is an open-source configuration management, automation, and orchestration tool.

‚úÖ Why use it:

	Simple to learn (YAML-based).
	
	Agentless (no software to install on client machines).
	
	Automates:
	
		Server provisioning
		
		Software installation
		
		Configuration changes
		
		Application deployments
		
		Patching
	
	‚úÖ Use cases:
	
		Infra provisioning
		
		App deployments
		
		Server configuration
		
		Compliance enforcement
		
		
‚úÖ How is Ansible different from Puppet, Chef, or Terraform?

| Tool          | Purpose                                | Language              | Agent                 | Key Difference               |
| ------------- | -------------------------------------- | --------------------- | --------------------- | ---------------------------- |
| **Ansible**   | Config mgmt, automation, orchestration | YAML                  | Agentless (SSH)       | Simpler, easy to start       |
| **Puppet**    | Config mgmt                            | DSL (Puppet Language) | Agent-based           | Requires agents on nodes     |
| **Chef**      | Config mgmt                            | Ruby                  | Agent-based           | More complex DSL             |
| **Terraform** | Infra provisioning (IaC)               | HCL                   | No agents (API-based) | Manages cloud infrastructure |

‚úÖ Simplified:

	Terraform: "Create servers"
	
	Ansible: "Configure servers"
	
	
‚úÖ Explain Ansible architecture (agentless vs agent-based).
	
	‚úÖ Ansible is agentless:

		No client agent needed.
		
		Uses SSH (Linux) or WinRM (Windows) to connect.
		
		The control node (where Ansible runs) pushes tasks to managed nodes.

	‚úÖ Puppet/Chef (agent-based):

		Agents run on client nodes and pull configuration from a master server.

	‚úÖ Why agentless is better for many teams:

		Easier to maintain
		
		No client installs
		
		Easier firewall/networking rules (only SSH access needed)
		
	
	
	
‚úÖ What is a playbook? What is an inventory?

	‚úÖ Playbook:

		A YAML file that defines the tasks you want Ansible to perform.
		
		The main automation unit.
		
		Contains:
		
		Hosts
		Variables
		Tasks
		Handlers
		
		
		EXAMPLE
		
		- hosts: webservers
		tasks:
			- name: Install Nginx
			apt:
				name: nginx
				state: present


	‚úÖ Inventory:

		List of target hosts Ansible manages.
		
		Can be static (INI/YAML file) or dynamic (cloud plugins).
		
		
‚úÖ What is idempotency? Why is it important?
	Idempotency = safe to run multiple times ‚Üí no unexpected changes.

	‚úÖ Ansible checks current state before making changes.
	‚úÖ Ensures:
	
		No duplicate installs
		
		Consistent server config
		
		Predictable behavior
	
	‚úÖ Why important?
	
		Safe reruns
		
		Easier recovery
		
		Reliable automation
		
		

‚úÖ What are Ansible modules? Give examples.
	
	‚úÖ Modules = reusable building blocks that Ansible uses to perform tasks.
	
	| Module        | Purpose                 |
	| ------------- | ----------------------- |
	| `apt` / `yum` | Install packages        |
	| `service`     | Start/stop services     |
	| `copy`        | Copy files              |
	| `template`    | Use Jinja2 templates    |
	| `user`        | Manage users            |
	| `file`        | Manage file permissions |
	

‚úÖ How do you define variables in Ansible?
	
	‚úÖ Ways to define variables:
	
	1Ô∏è. Inline in playbook:
		vars:
		app_port: 8080

	2Ô∏è. Inventory file:
	
	3. Command-line:
	
	4. Using set_fact inside tasks:
	
	
‚úÖ How does Ansible connect to managed nodes?
	Agentless:
	Ansible connects over SSH (Linux/Unix) or WinRM (Windows).
	
	Requires only:
	
		SSH access
		
		Python installed (usually present by default)
	
	Credentials handled via:
	
		SSH keys
		
		Passwords
		
		Vault-encrypted keys
		
		Jump hosts (bastions)
		
		
‚úÖ What is a role? Why use roles?
	A role is a reusable, self-contained unit of Ansible code.

	Organizes tasks, variables, templates, handlers, files, and defaults into a standard directory structure.

	‚úÖ Why use roles:

		Clean code separation.
		
		Reusable across projects.
		
		Easier to maintain and scale.
		
		Best practice for larger playbooks.
		
	‚úÖ Role directory structure:
	
		roles/
			webserver/
				tasks/
				handlers/
				files/
				templates/
				vars/
				defaults/
				meta/



‚úÖ What are handlers? How are they triggered?
	Handlers are special tasks that run only when notified by other tasks.
	
	Typically used for actions like restarting services.
	
	‚úÖ Example:
	tasks:
	- name: Install Nginx
		apt:
			name: nginx
			state: present
			notify: restart nginx

	handlers:
	- name: restart nginx
    service:
		name: nginx
		state: restarted

	‚úÖ Handlers run at the end of the play, after all tasks finish.
	
	
‚úÖ Explain the use of facts in Ansible.
	
	Facts are system information automatically collected from managed nodes at the start of playbook execution.
	
	‚úÖ Gathered by setup module (runs automatically unless disabled).
	
	‚úÖ Examples of facts:
	
		OS type
		
		Hostname
		
		IP addresses
		
		CPU, RAM, disk info
	
	- debug:
    var: ansible_facts['os_family']

	
	‚úÖ Disable fact gathering if not needed:	gather_facts: no
	
	
‚úÖ What is Ansible Vault? How do you encrypt and decrypt data?
	
	Ansible Vault encrypts sensitive data (passwords, API keys, certificates) in YAML files.

	
	‚úÖ Encrypt a file:

		ansible-vault encrypt secrets.yml
	
	‚úÖ Decrypt a file:

		ansible-vault decrypt secrets.yml
		
		
‚úÖ What is a dynamic inventory?
	
	Dynamic inventory pulls host info dynamically from external sources (cloud, CMDB, APIs).

	‚úÖ Examples:
	
		AWS EC2 plugin
		
		Azure plugin
		
		GCP plugin
		
		VMware vSphere plugin
	
	‚úÖ Benefit:
	
		No need to maintain static host lists.
		
		Automatically includes newly created resources.



‚úÖ Explain how you organize Ansible projects (folder structure, roles, group_vars, etc).

	project/
		inventories/
			production/
			hosts.yml
			group_vars/
				all.yml
				webservers.yml
		playbooks/
			site.yml
			webserver.yml
		roles/
			webserver/
			tasks/
			handlers/
			files/
			templates/
			vars/
			defaults/
		group_vars/
			all.yml
		host_vars/
			server1.yml
		vault/
			secrets.yml
			
			
	‚úÖ Key points:

		group_vars ‚Äî variables applied to groups.
		
		host_vars ‚Äî variables applied to individual hosts.
		
		roles ‚Äî reusable configurations.
		
		vault ‚Äî encrypted secrets.
		
		playbooks/ ‚Äî main playbook files.
	
	
‚úÖ How do you handle environment-specific variables (dev, staging, prod)?

	You can handle environment-specific variables using inventory directories, group_vars, or host_vars.

	inventories/
		dev/
			hosts.yml
			group_vars/
			all.yml
		staging/
			hosts.yml
			group_vars/
			all.yml
		prod/
			hosts.yml
			group_vars/
			all.yml
	
	
	‚úÖ You can also pass environment as a variable:		ansible-playbook site.yml -e "env=staging"


	‚úÖ Inside playbooks, reference the correct vars based on environment.
	
	
‚úÖ How can you debug failed Ansible tasks?

	‚úÖ Use -v, -vv, -vvv for increasing verbosity:
	
	ansible-playbook site.yml -vvv

	‚úÖ Use debug module to print variables:
	
	‚úÖ Use failed_when and ignore_errors for controlled debugging.
	
	
	
‚úÖ What is become in Ansible? When do you use it?

	‚úÖ	become is used for privilege escalation.
	
		Allows running tasks with elevated permissions (usually as root).
		
		
	‚úÖ Common when:

		Installing packages
		
		Modifying system config
		
		Managing services
		
		
		
‚úÖ How do you implement error handling in Ansible?

	‚úÖ ignore_errors ‚Äî Continue even if task fails:
	
	‚úÖ failed_when ‚Äî Customize failure conditions:
	
	‚úÖ block/rescue/always ‚Äî Similar to try-catch-finally:
	

	
‚úÖ Explain how Ansible integrates into CI/CD pipelines.
	‚úÖ Common integration steps:
	
	1Ô∏è. Source Control:
	
		Store playbooks in Git/GitLab/GitHub.
	
	2Ô∏è. Pipeline Stages:
	
		Build stage: Validate syntax (ansible-lint, yamllint).
		
		Test stage: Run playbooks in staging environment.
		
		Deploy stage: Run Ansible playbooks against target servers.
	
	3Ô∏è. Automation:
	
		Use Jenkins, GitLab CI, GitHub Actions, Azure DevOps, etc.
		
	‚úÖ Add Ansible playbook runs as part of deployment pipelines.
	
	
	
‚úÖ How do you handle secret management across multiple environments?
	
	‚úÖ Best practice:
	
		Use Ansible Vault for sensitive data.
		
		Create environment-specific vault files.
		
		
	vault/
		dev_secrets.yml
		staging_secrets.yml
		prod_secrets.yml


	‚úÖ Use different vault passwords for each environment if needed.

	‚úÖ Use external secrets managers:
	
		AWS Secrets Manager
		
		Azure Key Vault
		
		HashiCorp Vault
		
	
	
‚úÖ What are Ansible Collections?
	‚úÖ Collections = way to package and distribute Ansible content.
	
	‚úÖ Includes:
	
		Roles
		
		Modules
		
		Plugins
		
		Playbooks
		
		Documentation
	
	‚úÖ Why collections:
	
		Easier sharing
		
		Namespace isolation
		
		Standard format
		
		Dependency management
		
		
	‚úÖ Install collection: 	ansible-galaxy collection install community.mysql


	‚úÖ Use in playbook:	
	
		- hosts: all
			collections:
				- community.mysql



‚úÖ Describe a time you automated server configuration with Ansible.
	
	‚úÖ Sample Answer (you can adapt it to your experience):
	
	In my previous project, we had to configure ~50 Linux servers for a new microservices platform.
	
	I wrote Ansible playbooks to automate:
	
	User creation
	
	Package installation (Nginx, Docker, monitoring agents)
	
	Firewall configuration
	
	Application configuration files using Jinja2 templates
	
	I used roles to organize the playbooks and group_vars to handle environment-specific configs (dev, staging, prod).
	
	This reduced the initial setup time from several hours per server to just a few minutes, with full idempotency and consistency across all servers.
	
	
	

‚úÖ How would you use Ansible to patch 100+ servers?
	‚úÖ High-level approach:
	
	1Ô∏è. Prepare inventory of all 100 servers (static or dynamic).
	
	2Ô∏è. Write a playbook to handle OS updates:
	
			- hosts: all
			serial: 10
			become: yes
			tasks:
			- name: Update packages
			apt:
				update_cache: yes
				upgrade: dist


	3Ô∏è. Use Ansible serial keyword to patch servers in batches (avoid taking everything down at once):
	
	
	4. Schedule downtime windows and run dry runs (--check) before full execution.
	
	‚úÖ Benefit: Fully automated, safe, and controlled rollout.
	
	
	
‚úÖ How would you provision cloud infrastructure using Ansible?
	‚úÖ Ansible can be used as IaC (Infrastructure as Code) with cloud modules:
	
	AWS ‚Üí amazon.aws.ec2
	
	Azure ‚Üí azure.azcollection
	
	GCP ‚Üí google.cloud
	
	‚úÖ For cloud provisioning at scale, many teams combine:

		Terraform for provisioning cloud resources
		
		Ansible for post-provisioning configuration
		
		
‚úÖ How would you roll back a change in Ansible?
	‚úÖ There is no built-in rollback like in Terraform, but you can design rollback in a few ways:
	
	1Ô∏è. Write reversible playbooks:
	
	Use Ansible‚Äôs idempotency to revert configurations.
		# Install
		state: present
		
		# Rollback
		state: absent
		
	2Ô∏è. Version-controlled configs:

		Use Git to maintain versions of playbooks/templates.
		
		Roll back by running previous known-good version.
		
	3Ô∏è. Use block with conditional rollbacks:
		
		block:
		# risky change
		rescue:
		# rollback steps
	
	‚úÖ Key principle: Ansible rollbacks are generally manual but controlled via well-structured playbooks.
	
	
	
	
‚úÖ How do you secure Ansible automation?
	‚úÖ Secure automation includes:
	
	1Ô∏è. Secrets Management:
	
		Use Ansible Vault to encrypt sensitive variables (passwords, keys, API tokens).
		
		Use external vaults like AWS Secrets Manager, Azure Key Vault, or HashiCorp Vault.
	
	2Ô∏è. SSH Key Management:
	
		Use secure SSH keys.
		
		Rotate keys regularly.
	
		Avoid using passwords in plaintext.
	
	3Ô∏è. Least Privilege:
	
		Use become: yes only when required.
		
		Avoid using full root where unnecessary.
	
	4Ô∏è. Inventory Access Control:
	
		Restrict who can modify inventory files.
		
		Use version control with proper access control.
	
	5Ô∏è. Auditability:
	
		Use CI/CD pipelines to control who can run Ansible playbooks.
		
		Keep playbooks under source control.
	
	6Ô∏è. Linting & Validation:
	
		Use ansible-lint, yamllint, molecule for testing and code validation.
		
		
üõ†Ô∏è Key Ansible Topics To Prepare

| Topic                                               | Why Important                    |
| --------------------------------------------------- | -------------------------------- |
| Inventory (static & dynamic)                        | Control which servers to target. |
| Ansible Vault                                       | Secure sensitive data.           |
| Roles & reuse                                       | Build modular playbooks.         |
| Jinja2 templates                                    | Generate dynamic config files.   |
| Error handling (`ignore_errors`, `block`, `rescue`) | Stability in automation.         |
| Ansible Galaxy & Collections                        | Reuse community content.         |
| Ansible facts                                       | Gather dynamic host info.        |
| Handlers & notifications                            | Trigger conditional actions.     |
| Tags                                                | Run only parts of playbook.      |



üí¨ Common Ansible Best Practices (interview gold)

‚úÖ Always use roles for reusability.
‚úÖ Use Vault for secrets ‚Äî never hardcode passwords.
‚úÖ Keep inventories separate for different environments.
‚úÖ Use idempotent modules wherever possible.
‚úÖ Version control all playbooks.
‚úÖ Use proper error handling for long-running tasks.
‚úÖ Avoid shell/command modules if specific modules exist.
