🌟 Terraform Key Concepts
	✅ 1. Infrastructure as Code (IaC)
	
		Terraform enables you to define and provision infrastructure using a declarative language called HCL (HashiCorp Configuration Language).
		IaC means your infrastructure configurations are stored as code, version-controlled, and automated.
	
	✅ 2. Providers
	
		Plugins that interact with APIs of cloud platforms (like AWS, GCP, Azure) or SaaS tools (like GitHub, Datadog).
		Providers define the resources you can create.
	
	✅ 3. Resources
	
		The main blocks in Terraform code; they represent infrastructure objects like virtual machines, networks, DNS records, etc.
	
	✅ 4. Variables and Outputs
	
		Variables: dynamic inputs to your configurations (e.g., instance size, region).
		Outputs: show information after apply (e.g., IP address of a VM).
	
	✅ 5. Modules
	
		Reusable, self-contained chunks of Terraform code.
		Great for DRY (Don’t Repeat Yourself) and consistency.
	
	✅ 6. State File
	
		Terraform uses terraform.tfstate to keep track of the real-world infrastructure and the desired state.
		State can be stored locally or remotely (e.g., in S3 for AWS, GCS for GCP).
	
	✅ 7. Backends
	
		Configure how and where Terraform stores state data (e.g., local, remote like S3, Azure Blob Storage, GCS).
	
	✅ 8. Workspaces
	
		Isolated state environments within a single backend.
		Useful for managing different environments (e.g., dev, staging, prod).
	
	✅ 9. The Plan, Apply, and Destroy Cycle
	
		Plan: Show what changes will be made.
		Apply: Actually make the changes.
		Destroy: Remove all managed infrastructure.
	
	✅ 10. Taint and Refresh
	
		Taint: Marks a resource for recreation in the next apply.
		Refresh: Updates state to match real-world resources.
		

1. What is Terraform? How does it differ from tools like Ansible?	
| Feature                       | Terraform                                                     | Ansible                                                                      |
| ----------------------------- | ------------------------------------------------------------- | ---------------------------------------------------------------------------- |
| **Primary use**               | Infrastructure provisioning (create/update/destroy resources) | Configuration management (install packages, configure services, deploy apps) |
| **Language**                  | Declarative (HCL)                                             | Imperative (YAML)                                                            |
| **Idempotency**               | Built-in by maintaining state file                            | Playbooks must be idempotent by design                                       |
| **Execution**                 | `terraform plan` → `terraform apply`                          | Playbooks executed directly (`ansible-playbook`)                             |
| **State management**          | Uses a state file (`terraform.tfstate`) to track resources    | No built-in state; config tasks are stateless                                |
| **Cloud-native provisioning** | Native support for multiple cloud providers                   | Uses modules and plugins to integrate clouds                                 |


2. Explain what a provider and resource are in Terraform.
	✅ Provider:
	A plugin that lets Terraform communicate with APIs of external services (like AWS, GCP, Azure, VMware, GitHub, Datadog).
	Providers are defined in the .tf file with the provider block.
	✅ Resource:
	Represents a piece of infrastructure managed by Terraform (e.g., VM, database, S3 bucket, firewall rule).
	Resources are defined using the resource block.



3️. What are modules? How do you use them?
	✅ Modules are reusable groups of Terraform configurations.
	They help organize and standardize your code for repeat use (like building a VPC or creating a Kubernetes cluster).
	
	🔹 Using a module:
	1️. Create a directory (e.g., modules/vpc).
	2. Put your .tf files in it (e.g., main.tf, outputs.tf, variables.tf).
	3️. Call the module in your root configuration:

4.  Explain the difference between terraform apply and terraform plan.
	✅ terraform plan
	Shows you what Terraform would do (add, update, delete resources).
	It’s a dry-run – no actual changes are made.
	
	✅ terraform apply
	Actually executes the changes (provisions infrastructure).
	Can optionally skip the plan step using terraform apply -auto-approve.
	
	
5.  How does Terraform track resources it manages?
	✅ Terraform uses the terraform.tfstate file to track the current state of your infrastructure.
	It acts like a database for:
	
			What resources exist.
			Resource IDs (like EC2 instance IDs).
			Current settings of each resource.

	🔹 How it works:
	
		When you run terraform apply, Terraform updates this file to match the real-world infrastructure.
		It compares the desired state (.tf files) with the current state (in .tfstate).
		If there’s a mismatch, it creates a plan to fix it.
		
	🔹 State file considerations:
	
		Should be stored securely (can contain sensitive data).
		In teams, use remote backends (like S3, Azure Blob) to avoid conflicts.
		
		
		
Sample Terraform Module to provision basic inffra across AWS, Azure, and GCP


🗂️ Directory Structure

multi-cloud-terraform/
├── main.tf
├── providers.tf
├── variables.tf
├── outputs.tf
├── modules/
│   ├── aws/
│   │   └── ec2.tf
│   ├── azure/
│   │   └── vm.tf
│   └── gcp/
│       └── compute.tf



🧩 providers.tf

		provider "aws" {
		region  = var.aws_region
		alias   = "aws"
		}
		
		provider "azurerm" {
		features = {}
		alias    = "azure"
		}
		
		provider "google" {
		project = var.gcp_project
		region  = var.gcp_region
		alias   = "gcp"
		}

🧩 variables.tf

		variable "aws_region" { default = "us-east-1" }
		variable "azure_location" { default = "East US" }
		variable "gcp_project" {}
		variable "gcp_region" { default = "us-central1" }


🧩 main.tf

		module "aws_instance" {
		source     = "./modules/aws"
		providers  = { aws = aws }
		}
		
		module "azure_vm" {
		source     = "./modules/azure"
		providers  = { azurerm = azurerm }
		}
		
		module "gcp_instance" {
		source     = "./modules/gcp"
		providers  = { google = google }
		}


Then we can have AWS module >> ec2.tf , azure module >>> vm.tf , gcp module >>> compute.tf
