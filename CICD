CI/CD pipeline

CI >>> Continous Integration, automatically build and test code on every push
CD >>> Continous Delivery, automatically make code available to prod, can be continous delivery, or continous deployment ( directly to prod )

Pipeline >>> A series of steps ( build , test, deploy ) automated in a flow 

Stages / Jobs >>> Logical groupings within a pipeline i.e. Test stage

Artifacts >>> Files generated by pipeline	

Triggers >>> Events that start a pipeline

Environments >>> Seperate deployment targets >>> dev, staging, prod

Rollback >>> Mechanisms in place to revert back to prvious stable state in case deployment fails


COMMON PIPELINE Stages
	1. Build
	Compile code, package artifacts, run linters ( formatters )
	
	2. Tests
	Unit tests, integration tests, security scans
	
	3. Deploy
	Push to staging, then prod
	
	4. Notifications
	Slack, email, etc
	

START building a CI/CD Pipeline

Step 1 : Choose your CI CD tool
	Github actions
	Gitlab CI/CD
	Jenkins >>> Highly customizable, self hosted
	
Step 2 : Define the workflow
	Create a YAML file with steps determining what is to be done when it is triggered
	
	EXAMPLE :
		name: CI Pipeline
		
		on:
		push:
			branches: [ main ]
		
		jobs:
		build-and-test:
			runs-on: ubuntu-latest
			steps:
			- uses: actions/checkout@v3
			- name: Set up Node.js
				uses: actions/setup-node@v4
				with:
				node-version: '18'
			- run: npm ci
			- run: npm test
		
Step 3 : Add Build / Test / Deploy stages
	example 
	build a docker image
	push it to Registry like Docker hub or ECR
	Deploy to Kubernetes via kubectl
	
Step 4 : Secure Secrets
	Github Secrets, Vault, AWS Secrets Manager
	Never Hardcode sensitive data

Step 5 : Add Notifications
	Slack / email notification in github actions

Step 6 : Test and iterate 
	Push changes, pipeline triggers automatically
	Check logs and fix any failed steps

BEST Practices
	Keep pipeline fast >>> Split heavy tasks
	Use caching for dependencies
	Use environments for Dev, staging, Prod
	
